import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, MenuButtonWebApp
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, WEBAPP_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å WebApp
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    ]])
    
    welcome_text = f"""
üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>

üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à Telegram WebApp!

‚ú® <b>–ß—Ç–æ —É–º–µ–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –∞–≤–∞—Ç–∞—Ä
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ç–µ–º—É Telegram
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏ –ø–ª–∞–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞

üöÄ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!</b>
    """
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.message(Command("webapp"))
async def webapp_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /webapp"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å WebApp",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    ]])
    
    await message.answer(
        "üåê <b>–û—Ç–∫—Ä—ã—Ç—å WebApp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /webapp - –û—Ç–∫—Ä—ã—Ç—å WebApp
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /about - –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

üîó <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å WebApp"
2. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
3. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º!

üí° <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à—É —Ç–µ–º—É Telegram (—Å–≤–µ—Ç–ª–∞—è/—Ç–µ–º–Ω–∞—è).
    """
    
    await message.answer(help_text, parse_mode="HTML")

@dp.message(Command("about"))
async def about_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about"""
    about_text = """
‚ÑπÔ∏è <b>–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</b>

üîß <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ Frontend: React + TypeScript + Tailwind CSS v4
‚Ä¢ Backend: Python + aiogram
‚Ä¢ Hosting: Vercel/Netlify

‚ö° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞–±–æ—Ç–∞
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏

üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> –í–∞—à–µ –∏–º—è
üìÖ <b>–í–µ—Ä—Å–∏—è:</b> 1.0.0
    """
    
    await message.answer(about_text, parse_mode="HTML")

@dp.message(F.web_app_data)
async def web_app_data_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp
        web_app_data = message.web_app_data.data
        logger.info(f"Received WebApp data: {web_app_data}")
        
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
        import json
        try:
            data = json.loads(web_app_data)
            action = data.get('action', 'unknown')
            
            if action == 'gift_won':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –ø–æ–¥–∞—Ä–∫–∞
                gift = data.get('gift', {})
                spins_left = data.get('spinsLeft', 0)
                
                gift_name = gift.get('name', 'Unknown Gift')
                rarity = gift.get('rarity', 'common')
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
                rarity_emoji = {
                    'common': '‚ö™',
                    'rare': 'üîµ', 
                    'epic': 'üü£',
                    'legendary': 'üü°'
                }
                
                response_text = f"""
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–∏–≥—Ä—ã—à–µ–º!</b>

üéÅ <b>–ü–æ–¥–∞—Ä–æ–∫:</b> {gift_name}
{rarity_emoji.get(rarity, '‚ö™')} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {rarity.title()}
üé∞ <b>–°–ø–∏–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å:</b> {spins_left}

{f"üéä <b>–õ–ï–ì–ï–ù–î–ê–†–ù–´–ô –ü–û–î–ê–†–û–ö!</b> –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —É–¥–∞—á–∞!" if rarity == 'legendary' else ""}
                """
                
            elif action == 'user_interaction':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
                interaction_data = data.get('data', {})
                interaction_action = interaction_data.get('action', 'unknown')
                
                response_text = f"""
üìä <b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ</b>

üîß <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {interaction_action}
‚è∞ <b>–í—Ä–µ–º—è:</b> {data.get('timestamp', 'unknown')}
                """
                
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                response_text = f"""
‚úÖ <b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç WebApp!</b>

üìä <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}
üìù <b>–î–∞–Ω–Ω—ã–µ:</b> <code>{web_app_data}</code>
                """
                
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ –Ω–µ JSON, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            response_text = f"""
‚úÖ <b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç WebApp!</b>

üìä <code>{web_app_data}</code>
            """
        
        await message.answer(response_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error processing WebApp data: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>",
            parse_mode="HTML"
        )

@dp.message()
async def echo_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    ]])
    
    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebApp.\n\n"
        "üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, "
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=keyboard
    )

async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="webapp", description="üåê –û—Ç–∫—Ä—ã—Ç—å WebApp"),
        types.BotCommand(command="help", description="üÜò –ü–æ–º–æ—â—å"),
        types.BotCommand(command="about", description="‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"),
    ]
    
    await bot.set_my_commands(commands)
    logger.info("Bot commands set successfully")

async def set_menu_button():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Å WebApp"""
    try:
        menu_button = MenuButtonWebApp(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
        await bot.set_chat_menu_button(menu_button=menu_button)
        logger.info("Menu button set successfully")
    except Exception as e:
        logger.error(f"Error setting menu button: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        await set_bot_commands()
        await set_menu_button()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting bot...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")